{"$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C23",
                               "fullName": "GNU C23 (GCC) version 15.0.1 20250217 (experimental) (x86_64-pc-linux-gnu)",
                               "version": "15.0.1 20250217 (experimental)",
                               "informationUri": "https://gcc.gnu.org/gcc-15/",
                               "rules": []},
                    "extensions": [{"name": "diagnostic_plugin_test_paths",
                                    "fullName": "./diagnostic_plugin_test_paths.so"}]},
           "invocations": [{"arguments": ["/home/david/coding/work/build/gcc/cc1",
                                          "-quiet",
                                          "-iprefix",
                                          "/home/david/coding/work/install/lib/gcc/x86_64-pc-linux-gnu/15.0.1/",
                                          "-isystem",
                                          "/home/david/coding/work/build/gcc/include",
                                          "-isystem",
                                          "/home/david/coding/work/build/gcc/include-fixed",
                                          "-iplugindir=/home/david/coding/work/build/gcc/plugin",
                                          "/home/david/coding/work/src/gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-5.c",
                                          "-iplugindir=/home/david/coding/work/build/gcc/plugin",
                                          "-quiet",
                                          "-dumpbase",
                                          "diagnostic-test-paths-5.c",
                                          "-dumpbase-ext",
                                          ".c",
                                          "-mtune=generic",
                                          "-march=x86-64",
                                          "-fdiagnostics-color=never",
                                          "-fdiagnostics-urls=never",
                                          "-fno-diagnostics-show-caret",
                                          "-fno-diagnostics-show-line-numbers",
                                          "-fdiagnostics-path-format=separate-events",
                                          "-fdiagnostics-text-art-charset=none",
                                          "-fno-diagnostics-show-event-links",
                                          "-fplugin=./diagnostic_plugin_test_paths.so",
                                          "-fdiagnostics-format=sarif-file",
                                          "-o",
                                          "diagnostic-test-paths-5.s"],
                            "workingDirectory": {"uri": "/home/david/coding/work/build/gcc/testsuite/gcc"},
                            "startTimeUtc": "2025-02-18T00:43:59Z",
                            "executionSuccessful": false,
                            "toolExecutionNotifications": [],
                            "endTimeUtc": "2025-02-18T00:43:59Z"}],
           "artifacts": [{"location": {"uri": "/home/david/coding/work/src/gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-5.c"},
                          "sourceLanguage": "c",
                          "contents": {"text": "/* { dg-do compile } */\n/* { dg-options \"-fdiagnostics-format=sarif-file\" } */\n/* { dg-excess-errors \"The error is sent to the SARIF file, rather than stderr\" } */\n\n#include <stddef.h>\n#include <stdlib.h>\n\n/* Minimal reimplementation of cpython API.  */\ntypedef struct PyObject {} PyObject;\nextern int PyArg_ParseTuple (PyObject *args, const char *fmt, ...);\nextern PyObject *PyList_New (int);\nextern PyObject *PyLong_FromLong(long);\nextern void PyList_Append(PyObject *list, PyObject *item);\n\nPyObject *\nmake_a_list_of_random_ints_badly(PyObject *self,\n\t\t\t\t PyObject *args)\n{\n  PyObject *list, *item;\n  long count, i;\n\n  if (!PyArg_ParseTuple(args, \"i\", &count)) {\n    return NULL;\n  }\n\n  list = PyList_New(0);\n\t\n  for (i = 0; i < count; i++) {\n    item = PyLong_FromLong(random());\n    PyList_Append(list, item);\n  }\n  \n  return list;\n}\n\n/* \n   { dg-final { verify-sarif-file } }\n\n   { dg-final { scan-sarif-file \"\\\"tool\\\": \" } }\n\n     We expect info about the plugin:\n     { dg-final { scan-sarif-file \"\\\"extensions\\\": \\\\\\[\" } }\n       { dg-final { scan-sarif-file \"\\\"name\\\": \\\"diagnostic_plugin_test_paths\\\"\" } }\n       { dg-final { scan-sarif-file \"\\\"fullName\\\": \\\"\" } }\n\n     { dg-final { scan-sarif-file \"\\\"results\\\": \\\\\\[\" } }\n       { dg-final { scan-sarif-file \"\\\"level\\\": \\\"error\\\"\" } }\n         { dg-final { scan-sarif-file \"\\\"text\\\": \\\"passing NULL as argument 1 to 'PyList_Append' which requires a non-NULL parameter\\\"\" } }\n\n       We expect a path for the diagnostic:\n       { dg-final { scan-sarif-file \"\\\"codeFlows\\\": \\\\\\[\" } }\n         { dg-final { scan-sarif-file \"\\\"threadFlows\\\": \\\\\\[\" } }\n           { dg-final { scan-sarif-file \"\\\"locations\\\": \\\\\\[\" } }\n             { dg-final { scan-sarif-file \"\\\"text\\\": \\\"when 'PyList_New' fails, returning NULL\\\"\" } }\n             { dg-final { scan-sarif-file \"\\\"text\\\": \\\"when 'i < count'\\\"\" } }\n             { dg-final { scan-sarif-file \"\\\"text\\\": \\\"when calling 'PyList_Append', passing NULL from \\\\(1\\\\) as argument 1\\\"\" } }\n\n*/\n"},
                          "roles": ["analysisTarget",
                                    "tracedFile"]}],
           "results": [{"ruleId": "error",
                        "level": "error",
                        "message": {"text": "passing NULL as argument 1 to 'PyList_Append' which requires a non-NULL parameter"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "/home/david/coding/work/src/gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-5.c"},
                                                            "region": {"startLine": 30,
                                                                       "startColumn": 5,
                                                                       "endColumn": 30},
                                                            "contextRegion": {"startLine": 30,
                                                                              "snippet": {"text": "    PyList_Append(list, item);\n"}}}}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "/home/david/coding/work/src/gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-5.c"},
                                                                                                         "region": {"startLine": 26,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 26,
                                                                                                                           "snippet": {"text": "  list = PyList_New(0);\n"}}},
                                                                                    "logicalLocations": [{"name": "make_a_list_of_random_ints_badly",
                                                                                                          "fullyQualifiedName": "make_a_list_of_random_ints_badly",
                                                                                                          "decoratedName": "make_a_list_of_random_ints_badly",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "when 'PyList_New' fails, returning NULL"}},
                                                                       "nestingLevel": 0,
                                                                       "executionOrder": 1},
                                                                      {"location": {"physicalLocation": {"artifactLocation": {"uri": "/home/david/coding/work/src/gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-5.c"},
                                                                                                         "region": {"startLine": 28,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 28,
                                                                                                                           "snippet": {"text": "  for (i = 0; i < count; i++) {\n"}}},
                                                                                    "logicalLocations": [{"name": "make_a_list_of_random_ints_badly",
                                                                                                          "fullyQualifiedName": "make_a_list_of_random_ints_badly",
                                                                                                          "decoratedName": "make_a_list_of_random_ints_badly",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "when 'i < count'"}},
                                                                       "nestingLevel": 0,
                                                                       "executionOrder": 2},
                                                                      {"location": {"physicalLocation": {"artifactLocation": {"uri": "/home/david/coding/work/src/gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-5.c"},
                                                                                                         "region": {"startLine": 30,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 30,
                                                                                                                           "snippet": {"text": "    PyList_Append(list, item);\n"}}},
                                                                                    "logicalLocations": [{"name": "make_a_list_of_random_ints_badly",
                                                                                                          "fullyQualifiedName": "make_a_list_of_random_ints_badly",
                                                                                                          "decoratedName": "make_a_list_of_random_ints_badly",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "when calling 'PyList_Append', passing NULL from (1) as argument 1"}},
                                                                       "nestingLevel": 0,
                                                                       "executionOrder": 3}]}]}]}]}]}
